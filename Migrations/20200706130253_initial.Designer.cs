// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetCoreAngularNgrx.Repositories.Common;

namespace NetCoreAngularNgrx.Migrations
{
    [DbContext(typeof(DataDbContext))]
    [Migration("20200706130253_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5");

            modelBuilder.Entity("NetCoreAngularNgrx.Common.Models.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("Date")
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2020, 7, 6, 8, 2, 53, 426, DateTimeKind.Local).AddTicks(8439));

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Boards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Board #1"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Board #2"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Board #3"
                        });
                });

            modelBuilder.Entity("NetCoreAngularNgrx.Common.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("Date")
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2020, 7, 6, 8, 2, 53, 423, DateTimeKind.Local).AddTicks(4786));

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BoardId = 1,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Random Description",
                            Title = "Random Title"
                        });
                });

            modelBuilder.Entity("NetCoreAngularNgrx.Common.Models.WeatherForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WeatherForecasts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 7, 6, 8, 2, 53, 408, DateTimeKind.Local).AddTicks(6177),
                            Summary = "Freezing",
                            TemperatureC = 0
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 7, 6, 8, 2, 53, 415, DateTimeKind.Local).AddTicks(1595),
                            Summary = "Bracing",
                            TemperatureC = 5
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2020, 7, 6, 8, 2, 53, 415, DateTimeKind.Local).AddTicks(1683),
                            Summary = "Chilly",
                            TemperatureC = 10
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2020, 7, 6, 8, 2, 53, 415, DateTimeKind.Local).AddTicks(1693),
                            Summary = "Cool",
                            TemperatureC = 15
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2020, 7, 6, 8, 2, 53, 415, DateTimeKind.Local).AddTicks(1699),
                            Summary = "Mild",
                            TemperatureC = 20
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2020, 7, 6, 8, 2, 53, 415, DateTimeKind.Local).AddTicks(1708),
                            Summary = "Warm",
                            TemperatureC = 25
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2020, 7, 6, 8, 2, 53, 415, DateTimeKind.Local).AddTicks(1714),
                            Summary = "Balmy",
                            TemperatureC = 27
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2020, 7, 6, 8, 2, 53, 415, DateTimeKind.Local).AddTicks(1720),
                            Summary = "Hot",
                            TemperatureC = 30
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2020, 7, 6, 8, 2, 53, 415, DateTimeKind.Local).AddTicks(1726),
                            Summary = "Sweltering",
                            TemperatureC = 35
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2020, 7, 6, 8, 2, 53, 415, DateTimeKind.Local).AddTicks(1732),
                            Summary = "Scorching",
                            TemperatureC = 40
                        });
                });

            modelBuilder.Entity("NetCoreAngularNgrx.Common.Models.Note", b =>
                {
                    b.HasOne("NetCoreAngularNgrx.Common.Models.Board", "Board")
                        .WithMany("Notes")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
